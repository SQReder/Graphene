import type { ExpandRecursively, PipeFunction } from './utils';

interface FlowFn {
	<A, B>(a: PipeFunction<A, B>): ExpandRecursively<PipeFunction<A, B>>;

	<A, B, C>(a: PipeFunction<A, B>, b: PipeFunction<B, C>): PipeFunction<A, C>;

	<A, B, C, D>(a: PipeFunction<A, B>, b: PipeFunction<B, C>, c: PipeFunction<C, D>): PipeFunction<A, D>;

	<A, B, C, D, E>(
		a: PipeFunction<A, B>,
		b: PipeFunction<B, C>,
		c: PipeFunction<C, D>,
		d: PipeFunction<D, E>,
	): PipeFunction<A, E>;
}

/**
 * –§—É–Ω–∫—Ü–∏—è `flow` –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é,
 * –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø—Ä–∏–º–µ–Ω–∏—Ç –≤—Å–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, –∫ –≤—Ö–æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
 *
 * @function
 * @param {...Function} fns - –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –≤—Ö–æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
 * @returns {Function} –§—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–º–µ–Ω—è—é—â–∞—è –≤—Å–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, –∫ –≤—Ö–æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
 *
 * @example
 * const multiplyByTwo = (x: number) => x * 2;
 * const addThree = (x: number) => x + 3;
 * const myFlow = flow(multiplyByTwo, addThree);
 * console.log(myFlow(5)); // –í–µ—Ä–Ω–µ—Ç 13
 */
export const flow: FlowFn = (...fns: Array<PipeFunction<unknown, unknown>>): PipeFunction<unknown, unknown> => {
	console.group('üåä Flow Function');
	console.log('üì• Received functions:', fns);

	return (value) => {
		console.group('üîÑ Flow Execution');
		console.log('üöÄ Initial value:', value);

		const result = fns.reduce((acc, fn, index) => {
			console.log(`üîπ Step ${index + 1}: ${fn.name}`);
			console.log('  ‚Æï Input:', acc);
			const output = fn(acc);
			console.log('  ‚¨Ö Output:', output);
			return output;
		}, value);

		console.log('üèÅ Final result:', result);
		console.groupEnd();
		console.groupEnd();
		return result;
	};
};
